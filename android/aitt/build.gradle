plugins {
    id 'com.android.library'
}

android {
    compileSdkVersion 32
    defaultConfig {
        minSdkVersion 28
        targetSdkVersion 31
        versionCode 1
        versionName '1.0'
        project.archivesBaseName = "aitt"
        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
    }

    buildTypes {
        debug {
            debuggable true
        }
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    libraryVariants.all { variant ->
        variant.outputs.all {
            outputFileName = "${archivesBaseName}-${defaultConfig.versionName}.aar"
        }
    }

    testOptions {
        unitTests.returnDefaultValues = true
        unitTests.includeAndroidResources = true
        unitTests.all {
            jacoco {
                includeNoLocationClasses = true
                excludes = ['jdk.internal.*']
            }
            jvmArgs '-noverify'
        }
    }
}

dependencies {
    implementation 'androidx.appcompat:appcompat:1.4.1'
    implementation 'com.google.flatbuffers:flatbuffers-java:2.0.0'

    implementation project(path: ':android:modules:tcp')
    implementation project(path: ':android:modules:webrtc')
//    implementation project(path: ':android:modules:ipc')
    implementation project(path: ':android:modules:rtsp')
    implementation project(path: ':android:aitt-native')

    testImplementation 'junit:junit:4.13.2'
    testImplementation 'org.mockito:mockito-core:2.25.0'
    testImplementation 'org.robolectric:robolectric:4.8.1'

    androidTestImplementation 'androidx.test.espresso:espresso-core:3.4.0'
}

apply plugin: 'jacoco'

task jacocoTestReport(type: JacocoReport, dependsOn: ['testDebugUnitTest']) {

    reports {
        xml.enabled = true
        html.enabled = true
    }

    def fileFilter = ['**/R.class', '**/R$*.class', '**/BuildConfig.*', '**/Manifest*.*', '**/*Test*.*']
    def debugTree = fileTree(dir: "${buildDir}/intermediates/javac/debug", excludes: fileFilter)

    def mainSrc = "${project.projectDir}/src/main/java"

    getSourceDirectories().setFrom(files([mainSrc]))
    getClassDirectories().setFrom(files([debugTree]))
    getExecutionData().setFrom(fileTree(dir: "$buildDir", includes: [
            "jacoco/testDebugUnitTest.exec",
            "outputs/code-coverage/connected/*coverage.ec"
    ]))
}

task wrapper(type: Wrapper) {
    gradleVersion = '4.1'
}

build.dependsOn jacocoTestReport
