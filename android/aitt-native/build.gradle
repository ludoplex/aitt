plugins {
    id 'com.android.library'
    id "de.undercouch.download" version "5.0.1"
}

def thirdPartyDir = new File ("${rootProject.projectDir}/third_party")

def flatbuffersDir = new File("${thirdPartyDir}/flatbuffers-2.0.0")
def mosquittoDir = new File("${thirdPartyDir}/mosquitto-2.0.14")

android {
    compileSdkVersion 33
    ndkVersion "21.3.6528147"

    defaultConfig {
        minSdkVersion 28
        targetSdkVersion 33
        versionCode 1
        versionName '1.0'

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
        consumerProguardFiles "consumer-rules.pro"
        externalNativeBuild {
            cmake {
                arguments '-DLOG_STDOUT=OFF'
                arguments '-DCMAKE_VERBOSE_MAKEFILE=1'
                arguments '-DCMAKE_INSTALL_PREFIX:PATH=/usr'
                arguments '-DANDROID_STL=c++_shared'
                arguments "-DANDROID_NDK_HOME=${System.env.ANDROID_NDK_ROOT}"
                arguments "-DGSTREAMER_ROOT_ANDROID=${System.env.GSTREAMER_ROOT_ANDROID}"
                arguments '-DBUILD_TESTING=OFF'
                arguments '-DUSE_PREBUILT=OFF'
                arguments '-DVERSIONING=OFF'
                arguments '-DPLATFORM=android'
                arguments '-DCOVERAGE=OFF'
                arguments '-DUSE_GLIB=1'
                abiFilters 'arm64-v8a', 'x86'
                cppFlags "-std=c++17"
                targets "aitt-native", "aitt-transport-tcp"
            }
        }
    }

    externalNativeBuild {
        cmake {
            path file('./CMakeLists.txt')
        }
    }

    buildFeatures {
        prefab true
    }

    packagingOptions {
        jniLibs {
            useLegacyPackaging = true
        }
        pickFirst 'lib/arm64-v8a/libaitt-common.so'
    }
    libraryVariants.all { variant ->
        variant.outputs.all {
            outputFileName = "${archivesBaseName}-${defaultConfig.versionName}.aar"
        }
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
}

dependencies {

    compileOnly project(":android:flatbuffers")
    compileOnly project(":android:mosquitto")
    implementation 'com.google.flatbuffers:flatbuffers-java:2.0.0'
    implementation 'com.android.ndk.thirdparty:openssl:1.1.1g-alpha-1'

    implementation 'androidx.appcompat:appcompat:1.5.0'
    implementation 'com.google.android.material:material:1.6.1'
    testImplementation 'junit:junit:4.13.2'
    androidTestImplementation 'androidx.test.ext:junit:1.1.3'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.4.0'
}

task downloadFlatBuffers(type: Download) {
    doFirst {
        println("Downloading FlatBuffers")
    }
    src "https://github.com/google/flatbuffers/archive/refs/tags/v2.0.0.zip"
    dest new File(thirdPartyDir, "flatbuffers.zip")
    onlyIfModified true
}

task unzipFlatBuffers(type: Copy, dependsOn: downloadFlatBuffers) {
    doFirst {
        println("Unzipping FlatBuffers")
    }
    from zipTree(downloadFlatBuffers.dest)
    into thirdPartyDir
    onlyIf { !flatbuffersDir.exists() }
}

task downloadMosquitto(type: Download) {
    doFirst {
        println("Downloading Mosquitto")
    }
    src "https://github.com/eclipse/mosquitto/archive/refs/tags/v2.0.14.zip"
    dest new File(thirdPartyDir, "mosquitto-2.0.14.zip")
    onlyIfModified true
}

task unzipMosquitto(type: Copy, dependsOn: downloadMosquitto) {
    doFirst {
        println("Unzipping Mosquitto")
    }
    from zipTree(downloadMosquitto.dest)
    into thirdPartyDir
    onlyIf { !mosquittoDir.exists() }
}

preBuild.dependsOn(unzipFlatBuffers)
preBuild.dependsOn(unzipMosquitto)
preBuild.dependsOn ":android:flatbuffers:build"
preBuild.dependsOn ":android:mosquitto:build"
