plugins {
    id 'com.android.library'
    id 'jacoco'
}

android {
    compileSdkVersion 31

    defaultConfig {
        minSdkVersion 28
        targetSdkVersion 31

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
        consumerProguardFiles "consumer-rules.pro"
    }
    buildTypes {
        debug {
            testCoverageEnabled(true)
        }
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
}

dependencies {
    implementation 'androidx.appcompat:appcompat:1.4.1'
    implementation 'com.google.android.material:material:1.4.0'
    implementation 'org.webrtc:google-webrtc:1.0.32006'

    testImplementation 'junit:junit:4.13.2'
    testImplementation 'androidx.test:core:1.5.0'
    testImplementation 'org.mockito:mockito-inline:3.4.0'

    androidTestImplementation 'junit:junit:4.13.2'
    androidTestImplementation 'androidx.test.ext:junit:1.1.3'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.4.0'

    androidTestImplementation project(path: ':android:aitt')
}

task jacocoReport(type: JacocoReport) {
    group "Coverage"
    description "Generate XML/HTML code coverage reports for coverage.ec"

    reports {
        xml.enabled = true
        html.enabled = true
    }

    getSourceDirectories().setFrom("${project.projectDir}/src/main/java")
    def fileFilter = ['**/R.class', '**/R$*.class', '**/BuildConfig.*', '**/Manifest*.*', '**/*Test*.*', 'android/**/*.*']
    getClassDirectories().setFrom(
            fileTree(dir: "${buildDir}/intermediates/javac/debug", excludes: fileFilter),
            fileTree(dir: "${buildDir}/tmp/kotlin-classes/debug", excludes: fileFilter))
    getExecutionData().setFrom(
            fileTree(dir: "${buildDir}/outputs/code_coverage", includes: ['*.ec']))
}
