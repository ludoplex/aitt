include_directories(${CMAKE_CURRENT_SOURCE_DIR})

if(WITH_MBEDTLS)
    add_definitions(-DWITH_MBEDTLS)
    set(ENCRYPTOR_SRC AESEncryptorMbedTLS.cc)
else(WITH_MBEDTLS)
    set(ENCRYPTOR_SRC AESEncryptorOpenSSL.cc)
endif(WITH_MBEDTLS)

add_library(TCP_OBJ STATIC TCP.cc TCPServer.cc AESEncryptor.cc ${ENCRYPTOR_SRC})

if(PLATFORM STREQUAL "android")
    find_package(openssl REQUIRED CONFIG)
    target_link_libraries(TCP_OBJ openssl::crypto)
else(PLATFORM STREQUAL "android")
    if(PLATFORM STREQUAL "tizen")
        set(OPENSSL openssl1.1)
    else(PLATFORM STREQUAL "tizen")
        set(OPENSSL openssl)
        if(WITH_MBEDTLS)
            target_link_libraries(TCP_OBJ mbedcrypto)
            unset(OPENSSL)
        endif(WITH_MBEDTLS)
    endif(PLATFORM STREQUAL "tizen")
    pkg_check_modules(AITT_TCP_NEEDS REQUIRED ${OPENSSL})
    include_directories(${AITT_TCP_NEEDS_INCLUDE_DIRS})
    link_directories(${AITT_TCP_NEEDS_LIBRARY_DIRS})
endif(PLATFORM STREQUAL "android")

add_library(${AITT_TCP} SHARED ../transport_entry.cc Module.cc)
target_link_libraries(${AITT_TCP} Threads::Threads TCP_OBJ ${AITT_COMMON} ${AITT_TCP_NEEDS_LIBRARIES})

install(TARGETS ${AITT_TCP} DESTINATION ${CMAKE_INSTALL_LIBDIR})

if(BUILD_TESTING)
    add_subdirectory(tests)
    if(USE_GLIB)
        add_subdirectory(samples)
    endif(USE_GLIB)
endif(BUILD_TESTING)
